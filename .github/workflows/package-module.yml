name: Package Bearsampp Pricing Tables Module

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
  # Allows manual triggering

jobs:
  build-package:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Explicitly grant permission to write to repository
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          token: ${{ secrets.GITHUB_TOKEN }}  # Needed for pushing changes

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Get current date and set copyright format
        id: date
        run: |
          echo "BASE_VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          echo "CREATION_DATE=$(date +'%Y %B %d')" >> $GITHUB_ENV
          echo "CURRENT_YEAR=$(date +'%Y')" >> $GITHUB_ENV
          
          # Set copyright year format based on current year
          if [ "$(date +'%Y')" -gt "2025" ]; then
            echo "COPYRIGHT_YEAR=2025 - $(date +'%Y')" >> $GITHUB_ENV
            echo "COPYRIGHT_YEAR_XML=2025 - $(date +'%Y')" >> $GITHUB_ENV
          else
            echo "COPYRIGHT_YEAR=$(date +'%Y')" >> $GITHUB_ENV
            echo "COPYRIGHT_YEAR_XML=$(date +'%Y')" >> $GITHUB_ENV
          fi

      - name: Check for existing tags and resolve version conflicts
        run: |
          # Get all existing tags
          git fetch --tags
          
          # Check if the base version tag already exists
          BASE_TAG="${{ env.BASE_VERSION }}"
          if git rev-parse "$BASE_TAG" >/dev/null 2>&1; then
            echo "Tag $BASE_TAG already exists, finding next available version..."
          
            # Find all tags that match the pattern {BASE_VERSION}.{n}
            MATCHING_TAGS=$(git tag -l "$BASE_TAG.*")
          
            if [ -z "$MATCHING_TAGS" ]; then
              # No sub-versions exist, use .1
              NEXT_VERSION="${{ env.BASE_VERSION }}.1"
            else
              # Find the highest sub-version
              HIGHEST_SUBVERSION=$(echo "$MATCHING_TAGS" | sed "s/^$BASE_TAG\.//" | sort -n | tail -1)
              NEXT_SUBVERSION=$((HIGHEST_SUBVERSION + 1))
              NEXT_VERSION="${{ env.BASE_VERSION }}.$NEXT_SUBVERSION"
            fi
          
            echo "VERSION=$NEXT_VERSION" >> $GITHUB_ENV
            echo "Using version: $NEXT_VERSION"
          else
            echo "VERSION=${{ env.BASE_VERSION }}" >> $GITHUB_ENV
            echo "Using base version: ${{ env.BASE_VERSION }}"
          fi

      - name: List repository contents
        run: |
          echo "Repository contents:"
          ls -la
          echo "Searching for module files..."
          find . -name "mod_bearsampp_pricing_tables.php" -o -name "mod_bearsampp_pricing_tables.xml"

      - name: Update XML file in repository
        run: |
          # Find the XML file
          XML_FILE=$(find . -name "mod_bearsampp_pricing_tables.xml" | head -n 1)
          
          if [ -n "$XML_FILE" ]; then
            echo "Found XML file at: $XML_FILE"
          
            # Make a backup of the original file
            cp "$XML_FILE" "${XML_FILE}.bak"
          
            # Display original content
            echo "Original XML content (specific lines):"
            grep -A 6 "<creationDate>" "$XML_FILE" || true
          
            # Update version, creationDate, and copyright using sed with exact line matching
            sed -i "s|<version>.*</version>|<version>${{ env.VERSION }}</version>|g" "$XML_FILE"
            sed -i "s|<creationDate>.*</creationDate>|<creationDate>${{ env.CREATION_DATE }}</creationDate>|g" "$XML_FILE"
          
            # Update copyright with year range if needed
            if [ "${{ env.CURRENT_YEAR }}" -gt "2025" ]; then
              sed -i "s|<copyright>Copyright (C)[0-9]\{4\} Bearsampp</copyright>|<copyright>Copyright (C)${{ env.COPYRIGHT_YEAR_XML }} Bearsampp</copyright>|g" "$XML_FILE"
              sed -i "s|<copyright>Copyright (C)[0-9]\{4\} - [0-9]\{4\} Bearsampp</copyright>|<copyright>Copyright (C)${{ env.COPYRIGHT_YEAR_XML }} Bearsampp</copyright>|g" "$XML_FILE"
            else
              sed -i "s|<copyright>Copyright (C)[0-9]\{4\} Bearsampp</copyright>|<copyright>Copyright (C)${{ env.COPYRIGHT_YEAR_XML }} Bearsampp</copyright>|g" "$XML_FILE"
            fi
          
            # Fix fieldset names to ensure language strings render correctly
            sed -i 's|name="MOD_BEARSAMPP_GENERALSETTINGS"|name="basic"|g' "$XML_FILE"
            sed -i 's|name="COLUMN_01"|name="column1"|g' "$XML_FILE"
            sed -i 's|name="COLUMN_02"|name="column2"|g' "$XML_FILE"
            sed -i 's|name="COLUMN_03"|name="column3"|g' "$XML_FILE"
            sed -i 's|name="COLUMN_04"|name="column4"|g' "$XML_FILE"
          
            echo "Updated XML file in repository"
            echo "Updated XML content (specific lines):"
            grep -A 6 "<creationDate>" "$XML_FILE" || true
            echo "Language file paths in XML:"
            grep -A 2 "<languages>" "$XML_FILE" || true
          
            # Save the directory path for later use
            MODULE_DIR=$(dirname "$XML_FILE")
            echo "MODULE_DIR=$MODULE_DIR" >> $GITHUB_ENV
          else
            echo "::error::XML file not found in repository"
            exit 1
          fi

      - name: Update existing language files
        run: |
          # Find language files and update copyright if they exist
          find "${{ env.MODULE_DIR }}" -name "*.ini" -o -name "*.sys.ini" | while read -r LANG_FILE; do
            if [ -f "$LANG_FILE" ]; then
              echo "Updating copyright in language file: $LANG_FILE"
              sed -i "s|; Copyright (C) [0-9]\{4\} - [0-9]\{4\} Bearsampp|; Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp|g" "$LANG_FILE"
              sed -i "s|; Copyright (C) [0-9]\{4\} Bearsampp|; Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp|g" "$LANG_FILE"
            fi
          done

      - name: Update CSS file copyright
        run: |
          # Find CSS files and update copyright if they exist
          find "${{ env.MODULE_DIR }}" -name "*.css" | while read -r CSS_FILE; do
            if [ -f "$CSS_FILE" ]; then
              echo "Updating copyright in CSS file: $CSS_FILE"
          
              # Check if copyright header already exists
              if grep -q "Copyright (C)" "$CSS_FILE"; then
                # Update existing copyright with year range if needed
                if [ "${{ env.CURRENT_YEAR }}" -gt "2025" ]; then
                  sed -i "s|/\* Copyright (C) [0-9]\{4\} Bearsampp \*/|/* Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp */|g" "$CSS_FILE"
                  sed -i "s|/\* Copyright (C) [0-9]\{4\} - [0-9]\{4\} Bearsampp \*/|/* Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp */|g" "$CSS_FILE"
                  sed -i "s| \* Copyright (C) [0-9]\{4\} Bearsampp| * Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp|g" "$CSS_FILE"
                  sed -i "s| \* Copyright (C) [0-9]\{4\} - [0-9]\{4\} Bearsampp| * Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp|g" "$CSS_FILE"
                else
                  sed -i "s|/\* Copyright (C) [0-9]\{4\} Bearsampp \*/|/* Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp */|g" "$CSS_FILE"
                  sed -i "s|/\* Copyright (C) [0-9]\{4\} - [0-9]\{4\} Bearsampp \*/|/* Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp */|g" "$CSS_FILE"
                  sed -i "s| \* Copyright (C) [0-9]\{4\} Bearsampp| * Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp|g" "$CSS_FILE"
                  sed -i "s| \* Copyright (C) [0-9]\{4\} - [0-9]\{4\} Bearsampp| * Copyright (C) ${{ env.COPYRIGHT_YEAR }} Bearsampp|g" "$CSS_FILE"
                fi
              fi
            fi
          done

      - name: Commit changes to repository
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if there are changes to commit
          if git diff --exit-code; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Update version to ${{ env.VERSION }}, creation date to ${{ env.CREATION_DATE }}, and copyright year to ${{ env.COPYRIGHT_YEAR }}"
            git push origin main
            echo "Changes committed and pushed to repository"
          fi

      - name: Create package directory
        run: mkdir -p package/mod_bearsampp_pricing_tables

      - name: Copy module files
        run: |
          # Function to copy file if it exists
          copy_if_exists() {
            if [ -f "${{ env.MODULE_DIR }}/$1" ]; then
              cp "${{ env.MODULE_DIR }}/$1" package/mod_bearsampp_pricing_tables/
              echo "Copied $1"
            fi
          }
          
          # Function to copy directory if it exists
          copy_dir_if_exists() {
            if [ -d "${{ env.MODULE_DIR }}/$1" ]; then
              cp -r "${{ env.MODULE_DIR }}/$1" package/mod_bearsampp_pricing_tables/
              echo "Copied directory $1"
            fi
          }
          
          # Copy required files
          copy_if_exists "mod_bearsampp_pricing_tables.php"
          copy_if_exists "mod_bearsampp_pricing_tables.xml"
          copy_if_exists "helper.php"
          copy_if_exists "License.txt"
          copy_if_exists "index.html"
          
          # Copy directories
          copy_dir_if_exists "css"
          copy_dir_if_exists "elements"
          copy_dir_if_exists "tmpl"
          copy_dir_if_exists "language"
          
          # Create empty index.html if it doesn't exist in the package
          if [ ! -f "package/mod_bearsampp_pricing_tables/index.html" ]; then
            # Only create index.html if it exists in the original module
            if [ -f "${{ env.MODULE_DIR }}/index.html" ]; then
              cp "${{ env.MODULE_DIR }}/index.html" package/mod_bearsampp_pricing_tables/index.html
              echo "Copied index.html"
            fi
          fi
          
          # List the contents of the package directory
          echo "Package contents:"
          ls -la package/mod_bearsampp_pricing_tables/

      - name: Generate directory tree
        run: |
          apt-get update && apt-get install -y tree
          tree package/mod_bearsampp_pricing_tables > package/directory-structure.txt

      - name: Create ZIP archive
        run: |
          cd package
          zip -r mod_bearsampp_pricing_tables_${{ env.VERSION }}.zip mod_bearsampp_pricing_tables
          echo "Created ZIP archive: mod_bearsampp_pricing_tables_${{ env.VERSION }}.zip"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Bearsampp Pricing Tables ${{ env.VERSION }}
          files: |
            package/mod_bearsampp_pricing_tables_${{ env.VERSION }}.zip
            package/directory-structure.txt
          draft: false
          prerelease: false
          body: |
            Bearsampp Pricing Tables Module ${{ env.VERSION }}
            
            ### Download Options:
            - Download directly from this release page
            - Access the artifact from the Actions tab of this workflow run
            
            ### Changes:
            - Updated version to ${{ env.VERSION }}
            - Updated creation date to ${{ env.CREATION_DATE }}
            - Updated copyright year to ${{ env.COPYRIGHT_YEAR }}
            - Fixed language string rendering issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifact for easy access from GitHub Actions
      - name: Upload to GitHub Artifacts
        id: upload_artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: mod_bearsampp_pricing_tables_${{ env.VERSION }}
          path: package/mod_bearsampp_pricing_tables_${{ env.VERSION }}.zip
          retention-days: 90
          if-no-files-found: warn

      # Add information about downloading the artifact
      - name: Artifact Download Information
        run: |
          echo "::notice::The module package has been uploaded as an artifact."
          echo "::notice::You can download it from the Actions tab of this workflow run."
          echo "::notice::Go to Actions → This workflow → This run → Artifacts section → Download 'mod_bearsampp_pricing_tables_${{ env.VERSION }}'"
